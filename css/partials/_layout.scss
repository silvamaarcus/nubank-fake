// Configuração de layout do Projeto p/ tamanhos de telas distintos.

// Container EXTRA-GRANDE
$container-xl: 1440px;
// Container GRANDE
$container-l: 1140px;
// Container MEDIO
$container-m: 960px;
// Container PEQUENO
$container-s: 540px;

// Mixins para Responsividade
@mixin responsive($device) {
  @if $device == xl {
    // Aplicar layout p/ telas com resoluções maiores que 1440px
    @media screen and (min-width: $container-xl) {
      @content; // Setar estilos estabelecidos na tag especifica do CSS.
    }
  } @else if $device == l {
    // Aplicar layout p/ telas com resoluções entre que 1440px e 1140px
    @media screen and (max-width: $container-xl) and (min-width: $container-l) {
      @content;
    }
  } @else if $device == m {
    // Aplicar layout p/ telas com resoluções entre que 1140px e 960px
    @media screen and (max-width: $container-l) and (min-width: $container-m) {
      @content;
    }
  } @else if $device == s {
    // Aplicar layout p/ telas com resolução menor que 960px
    @media screen and (max-width: $container-m) {
      @content;
    }
  } @else if $device == xs {
    // Aplicar layout p/ telas com resolução menor que 540px
    @media screen and (max-width: $container-s) {
      @content;
    }
  }
}

// 1) Biblioteca Diversos

// 1.1) Esconder barra de rolagem.
.hidden {
  overflow: hidden;
}

// 2) Biblioteca Flexbox | Item pai

// Flexbox p/ que os elementos fiquem alinhados da esquerda p/ direita.
.flex-start {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}
// Flexbox p/ que os elementos fiquem centralizados verticalmente e horizontalmente.
.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
// Flexbox p/ que os elementos fiquem em colunas.
.flex-column {
  flex-direction: column;
}
// Flexbox p/ que os elementos fiquem em posição relativa.
.flex-relative {
  position: relative;
}
// Flexbox p/ que os elementos quebrem a linha no container, quando necessario.
.flex-wrap {
  flex-wrap: wrap;
}

// 3) Biblioteca Flexbox | Itens filhos

// PROPRIEDADES DO ELEMENTO -> flex: (flex-grow) (flex-shrink) (flex-basis)
// (flex-grow): Capacidade do elemento se expandir em relação aos outros.
// (flex-shrink): Capacidade do elemento se contrair em relação aos outros.
// (flex-basis): Definir tamanho inicial do elemento antes de qualquer expansão ou contração.

.flex-item-1 {
  flex: 1 1 360px;
}
.flex-item-2 {
  flex: 2 1 360px;
}
.flex-item-3 {
  flex: 3 1 360px;
}
.flex-item-4 {
  flex: 4 1 360px;
}
.flex-item-5 {
  flex: 5 1 360px;
}
.flex-item-auto {
  flex: 1 1 auto;
}

// 4) Biblioteca para Largura.

// Largura automática p/ o elemento. 
.w-auto {
  width: auto;
}
// Largura de 100% do tamanho p/ o elemento em relação ao pai. 
.w-100 {
  width: 100%;
}
// Largura de 75% do tamanho p/ o elemento em relação ao pai. 
.w-75 {
  width: 75%;
}
// Largura de 50% do tamanho p/ o elemento em relação ao pai. 
.w-50 {
  width: 50%;
}
// Largura de 25% do tamanho p/ o elemento em relação ao pai. 
.w-25 {
  width: 25%;
}

.container {
  max-width: $container-xl;
  margin: 0 auto;
  padding: 96px 24px;

  display: flex; // elementos um ao lado do outro
  justify-content: center; // centralizar elementos horizontalmente
  align-items: center; // centralizar elementos verticalmente

  overflow: hidden; //esconder barra de rolagem

  flex-direction: row; // elementos com direção em linha

  // aplicando responsividade
  @include responsive(s) {
    flex-direction: column; // elementos com direção em coluna (tela menor)
    padding: 32px 18px;
  }
}

.hero {
  height: 90vh;

  // Aplicar responsividade de acordo com a tela do usuário.
  @include responsive(s) {
    height: auto;
  }
}